/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'UnicastPack'
 * message type.
 */

package edu.rice.compass.comm;

public class UnicastPack extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new UnicastPack of size 29. */
    public UnicastPack() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new UnicastPack of the given data_length. */
    public UnicastPack(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack with the given data_length
     * and base offset.
     */
    public UnicastPack(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack using the given byte array
     * as backing store.
     */
    public UnicastPack(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack using the given byte array
     * as backing store, with the given base offset.
     */
    public UnicastPack(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public UnicastPack(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack embedded in the given message
     * at the given base offset.
     */
    public UnicastPack(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new UnicastPack embedded in the given message
     * at the given base offset and length.
     */
    public UnicastPack(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <UnicastPack> \n";
      try {
        s += "  [retriesLeft=0x"+Long.toHexString(get_retriesLeft())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.src=0x"+Long.toHexString(get_data_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.dest=0x"+Long.toHexString(get_data_dest())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.type=0x"+Long.toHexString(get_data_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.mask=0x"+Long.toHexString(get_data_data_opt_mask())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.diagMode=0x"+Long.toHexString(get_data_data_opt_diagMode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.txPower=0x"+Long.toHexString(get_data_data_opt_txPower())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.rfAck=0x"+Long.toHexString(get_data_data_opt_rfAck())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.radioOffTime=0x"+Long.toHexString(get_data_data_opt_radioOffTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.hplPM=0x"+Long.toHexString(get_data_data_opt_hplPM())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.opt.rfChan=0x"+Long.toHexString(get_data_data_opt_rfChan())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wData.dataSet=0x"+Long.toHexString(get_data_data_wData_dataSet())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wData.level=0x"+Long.toHexString(get_data_data_wData_level())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wData.state=0x"+Long.toHexString(get_data_data_wData_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wData.value=";
        for (int i = 0; i < 2; i++) {
          s += Float.toString(getElement_data_data_wData_value(i))+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpHeader.requestType=0x"+Long.toHexString(get_data_data_bpHeader_requestType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpHeader.packTotal=0x"+Long.toHexString(get_data_data_bpHeader_packTotal())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpHeader.byteTotal=0x"+Long.toHexString(get_data_data_bpHeader_byteTotal())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpHeader.numBlocks=0x"+Long.toHexString(get_data_data_bpHeader_numBlocks())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpHeader.numPtrs=0x"+Long.toHexString(get_data_data_bpHeader_numPtrs())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpData.curPack=0x"+Long.toHexString(get_data_data_bpData_curPack())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.bpData.data=";
        for (int i = 0; i < 22; i++) {
          s += "0x"+Long.toHexString(getElement_data_data_bpData_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wState.state=0x"+Long.toHexString(get_data_data_wState_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.wState.dataSetTime=0x"+Long.toHexString(get_data_data_wState_dataSetTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: retriesLeft
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'retriesLeft' is signed (false).
     */
    public static boolean isSigned_retriesLeft() {
        return false;
    }

    /**
     * Return whether the field 'retriesLeft' is an array (false).
     */
    public static boolean isArray_retriesLeft() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'retriesLeft'
     */
    public static int offset_retriesLeft() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'retriesLeft'
     */
    public static int offsetBits_retriesLeft() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'retriesLeft'
     */
    public short get_retriesLeft() {
        return (short)getUIntElement(offsetBits_retriesLeft(), 8);
    }

    /**
     * Set the value of the field 'retriesLeft'
     */
    public void set_retriesLeft(short value) {
        setUIntElement(offsetBits_retriesLeft(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'retriesLeft'
     */
    public static int size_retriesLeft() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'retriesLeft'
     */
    public static int sizeBits_retriesLeft() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.src
    //   Field type: int
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.src' is signed (false).
     */
    public static boolean isSigned_data_src() {
        return false;
    }

    /**
     * Return whether the field 'data.src' is an array (false).
     */
    public static boolean isArray_data_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.src'
     */
    public static int offset_data_src() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.src'
     */
    public static int offsetBits_data_src() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.src'
     */
    public int get_data_src() {
        return (int)getUIntElement(offsetBits_data_src(), 16);
    }

    /**
     * Set the value of the field 'data.src'
     */
    public void set_data_src(int value) {
        setUIntElement(offsetBits_data_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.src'
     */
    public static int size_data_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.src'
     */
    public static int sizeBits_data_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.dest
    //   Field type: int
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.dest' is signed (false).
     */
    public static boolean isSigned_data_dest() {
        return false;
    }

    /**
     * Return whether the field 'data.dest' is an array (false).
     */
    public static boolean isArray_data_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.dest'
     */
    public static int offset_data_dest() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.dest'
     */
    public static int offsetBits_data_dest() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'data.dest'
     */
    public int get_data_dest() {
        return (int)getUIntElement(offsetBits_data_dest(), 16);
    }

    /**
     * Set the value of the field 'data.dest'
     */
    public void set_data_dest(int value) {
        setUIntElement(offsetBits_data_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.dest'
     */
    public static int size_data_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.dest'
     */
    public static int sizeBits_data_dest() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.type
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.type' is signed (false).
     */
    public static boolean isSigned_data_type() {
        return false;
    }

    /**
     * Return whether the field 'data.type' is an array (false).
     */
    public static boolean isArray_data_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.type'
     */
    public static int offset_data_type() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.type'
     */
    public static int offsetBits_data_type() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'data.type'
     */
    public short get_data_type() {
        return (short)getUIntElement(offsetBits_data_type(), 8);
    }

    /**
     * Set the value of the field 'data.type'
     */
    public void set_data_type(short value) {
        setUIntElement(offsetBits_data_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.type'
     */
    public static int size_data_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.type'
     */
    public static int sizeBits_data_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.mask
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.mask' is signed (false).
     */
    public static boolean isSigned_data_data_opt_mask() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.mask' is an array (false).
     */
    public static boolean isArray_data_data_opt_mask() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.mask'
     */
    public static int offset_data_data_opt_mask() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.mask'
     */
    public static int offsetBits_data_data_opt_mask() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.mask'
     */
    public short get_data_data_opt_mask() {
        return (short)getUIntElement(offsetBits_data_data_opt_mask(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.mask'
     */
    public void set_data_data_opt_mask(short value) {
        setUIntElement(offsetBits_data_data_opt_mask(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.mask'
     */
    public static int size_data_data_opt_mask() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.mask'
     */
    public static int sizeBits_data_data_opt_mask() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.diagMode
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.diagMode' is signed (false).
     */
    public static boolean isSigned_data_data_opt_diagMode() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.diagMode' is an array (false).
     */
    public static boolean isArray_data_data_opt_diagMode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.diagMode'
     */
    public static int offset_data_data_opt_diagMode() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.diagMode'
     */
    public static int offsetBits_data_data_opt_diagMode() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.diagMode'
     */
    public short get_data_data_opt_diagMode() {
        return (short)getUIntElement(offsetBits_data_data_opt_diagMode(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.diagMode'
     */
    public void set_data_data_opt_diagMode(short value) {
        setUIntElement(offsetBits_data_data_opt_diagMode(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.diagMode'
     */
    public static int size_data_data_opt_diagMode() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.diagMode'
     */
    public static int sizeBits_data_data_opt_diagMode() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.txPower
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.txPower' is signed (false).
     */
    public static boolean isSigned_data_data_opt_txPower() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.txPower' is an array (false).
     */
    public static boolean isArray_data_data_opt_txPower() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.txPower'
     */
    public static int offset_data_data_opt_txPower() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.txPower'
     */
    public static int offsetBits_data_data_opt_txPower() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.txPower'
     */
    public short get_data_data_opt_txPower() {
        return (short)getUIntElement(offsetBits_data_data_opt_txPower(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.txPower'
     */
    public void set_data_data_opt_txPower(short value) {
        setUIntElement(offsetBits_data_data_opt_txPower(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.txPower'
     */
    public static int size_data_data_opt_txPower() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.txPower'
     */
    public static int sizeBits_data_data_opt_txPower() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.rfAck
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.rfAck' is signed (false).
     */
    public static boolean isSigned_data_data_opt_rfAck() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.rfAck' is an array (false).
     */
    public static boolean isArray_data_data_opt_rfAck() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.rfAck'
     */
    public static int offset_data_data_opt_rfAck() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.rfAck'
     */
    public static int offsetBits_data_data_opt_rfAck() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.rfAck'
     */
    public short get_data_data_opt_rfAck() {
        return (short)getUIntElement(offsetBits_data_data_opt_rfAck(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.rfAck'
     */
    public void set_data_data_opt_rfAck(short value) {
        setUIntElement(offsetBits_data_data_opt_rfAck(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.rfAck'
     */
    public static int size_data_data_opt_rfAck() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.rfAck'
     */
    public static int sizeBits_data_data_opt_rfAck() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.radioOffTime
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.radioOffTime' is signed (false).
     */
    public static boolean isSigned_data_data_opt_radioOffTime() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.radioOffTime' is an array (false).
     */
    public static boolean isArray_data_data_opt_radioOffTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.radioOffTime'
     */
    public static int offset_data_data_opt_radioOffTime() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.radioOffTime'
     */
    public static int offsetBits_data_data_opt_radioOffTime() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'data.data.opt.radioOffTime'
     */
    public int get_data_data_opt_radioOffTime() {
        return (int)getUIntElement(offsetBits_data_data_opt_radioOffTime(), 16);
    }

    /**
     * Set the value of the field 'data.data.opt.radioOffTime'
     */
    public void set_data_data_opt_radioOffTime(int value) {
        setUIntElement(offsetBits_data_data_opt_radioOffTime(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.radioOffTime'
     */
    public static int size_data_data_opt_radioOffTime() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.radioOffTime'
     */
    public static int sizeBits_data_data_opt_radioOffTime() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.hplPM
    //   Field type: short
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.hplPM' is signed (false).
     */
    public static boolean isSigned_data_data_opt_hplPM() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.hplPM' is an array (false).
     */
    public static boolean isArray_data_data_opt_hplPM() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.hplPM'
     */
    public static int offset_data_data_opt_hplPM() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.hplPM'
     */
    public static int offsetBits_data_data_opt_hplPM() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.hplPM'
     */
    public short get_data_data_opt_hplPM() {
        return (short)getUIntElement(offsetBits_data_data_opt_hplPM(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.hplPM'
     */
    public void set_data_data_opt_hplPM(short value) {
        setUIntElement(offsetBits_data_data_opt_hplPM(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.hplPM'
     */
    public static int size_data_data_opt_hplPM() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.hplPM'
     */
    public static int sizeBits_data_data_opt_hplPM() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.opt.rfChan
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.opt.rfChan' is signed (false).
     */
    public static boolean isSigned_data_data_opt_rfChan() {
        return false;
    }

    /**
     * Return whether the field 'data.data.opt.rfChan' is an array (false).
     */
    public static boolean isArray_data_data_opt_rfChan() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.opt.rfChan'
     */
    public static int offset_data_data_opt_rfChan() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.opt.rfChan'
     */
    public static int offsetBits_data_data_opt_rfChan() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'data.data.opt.rfChan'
     */
    public short get_data_data_opt_rfChan() {
        return (short)getUIntElement(offsetBits_data_data_opt_rfChan(), 8);
    }

    /**
     * Set the value of the field 'data.data.opt.rfChan'
     */
    public void set_data_data_opt_rfChan(short value) {
        setUIntElement(offsetBits_data_data_opt_rfChan(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.opt.rfChan'
     */
    public static int size_data_data_opt_rfChan() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.opt.rfChan'
     */
    public static int sizeBits_data_data_opt_rfChan() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wData.dataSet
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wData.dataSet' is signed (false).
     */
    public static boolean isSigned_data_data_wData_dataSet() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wData.dataSet' is an array (false).
     */
    public static boolean isArray_data_data_wData_dataSet() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wData.dataSet'
     */
    public static int offset_data_data_wData_dataSet() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wData.dataSet'
     */
    public static int offsetBits_data_data_wData_dataSet() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.data.wData.dataSet'
     */
    public short get_data_data_wData_dataSet() {
        return (short)getUIntElement(offsetBits_data_data_wData_dataSet(), 8);
    }

    /**
     * Set the value of the field 'data.data.wData.dataSet'
     */
    public void set_data_data_wData_dataSet(short value) {
        setUIntElement(offsetBits_data_data_wData_dataSet(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.wData.dataSet'
     */
    public static int size_data_data_wData_dataSet() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.wData.dataSet'
     */
    public static int sizeBits_data_data_wData_dataSet() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wData.level
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wData.level' is signed (false).
     */
    public static boolean isSigned_data_data_wData_level() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wData.level' is an array (false).
     */
    public static boolean isArray_data_data_wData_level() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wData.level'
     */
    public static int offset_data_data_wData_level() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wData.level'
     */
    public static int offsetBits_data_data_wData_level() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'data.data.wData.level'
     */
    public short get_data_data_wData_level() {
        return (short)getUIntElement(offsetBits_data_data_wData_level(), 8);
    }

    /**
     * Set the value of the field 'data.data.wData.level'
     */
    public void set_data_data_wData_level(short value) {
        setUIntElement(offsetBits_data_data_wData_level(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.wData.level'
     */
    public static int size_data_data_wData_level() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.wData.level'
     */
    public static int sizeBits_data_data_wData_level() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wData.state
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wData.state' is signed (false).
     */
    public static boolean isSigned_data_data_wData_state() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wData.state' is an array (false).
     */
    public static boolean isArray_data_data_wData_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wData.state'
     */
    public static int offset_data_data_wData_state() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wData.state'
     */
    public static int offsetBits_data_data_wData_state() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'data.data.wData.state'
     */
    public short get_data_data_wData_state() {
        return (short)getUIntElement(offsetBits_data_data_wData_state(), 8);
    }

    /**
     * Set the value of the field 'data.data.wData.state'
     */
    public void set_data_data_wData_state(short value) {
        setUIntElement(offsetBits_data_data_wData_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.wData.state'
     */
    public static int size_data_data_wData_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.wData.state'
     */
    public static int sizeBits_data_data_wData_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wData.value
    //   Field type: float[]
    //   Offset (bits): 72
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wData.value' is signed (false).
     */
    public static boolean isSigned_data_data_wData_value() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wData.value' is an array (true).
     */
    public static boolean isArray_data_data_wData_value() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wData.value'
     */
    public static int offset_data_data_wData_value(int index1) {
        int offset = 72;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wData.value'
     */
    public static int offsetBits_data_data_wData_value(int index1) {
        int offset = 72;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'data.data.wData.value' as a float[]
     */
    public float[] get_data_data_wData_value() {
        float[] tmp = new float[2];
        for (int index0 = 0; index0 < numElements_data_data_wData_value(0); index0++) {
            tmp[index0] = getElement_data_data_wData_value(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data.data.wData.value' from the given float[]
     */
    public void set_data_data_wData_value(float[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data_data_wData_value(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a float) of the array 'data.data.wData.value'
     */
    public float getElement_data_data_wData_value(int index1) {
        return (float)getFloatElement(offsetBits_data_data_wData_value(index1), 32);
    }

    /**
     * Set an element of the array 'data.data.wData.value'
     */
    public void setElement_data_data_wData_value(int index1, float value) {
        setFloatElement(offsetBits_data_data_wData_value(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data.data.wData.value'
     */
    public static int totalSize_data_data_wData_value() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data.data.wData.value'
     */
    public static int totalSizeBits_data_data_wData_value() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data.data.wData.value'
     */
    public static int elementSize_data_data_wData_value() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data.data.wData.value'
     */
    public static int elementSizeBits_data_data_wData_value() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'data.data.wData.value'
     */
    public static int numDimensions_data_data_wData_value() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data.data.wData.value'
     */
    public static int numElements_data_data_wData_value() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'data.data.wData.value'
     * for the given dimension.
     */
    public static int numElements_data_data_wData_value(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpHeader.requestType
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpHeader.requestType' is signed (false).
     */
    public static boolean isSigned_data_data_bpHeader_requestType() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpHeader.requestType' is an array (false).
     */
    public static boolean isArray_data_data_bpHeader_requestType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpHeader.requestType'
     */
    public static int offset_data_data_bpHeader_requestType() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpHeader.requestType'
     */
    public static int offsetBits_data_data_bpHeader_requestType() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.data.bpHeader.requestType'
     */
    public short get_data_data_bpHeader_requestType() {
        return (short)getUIntElement(offsetBits_data_data_bpHeader_requestType(), 8);
    }

    /**
     * Set the value of the field 'data.data.bpHeader.requestType'
     */
    public void set_data_data_bpHeader_requestType(short value) {
        setUIntElement(offsetBits_data_data_bpHeader_requestType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpHeader.requestType'
     */
    public static int size_data_data_bpHeader_requestType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpHeader.requestType'
     */
    public static int sizeBits_data_data_bpHeader_requestType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpHeader.packTotal
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpHeader.packTotal' is signed (false).
     */
    public static boolean isSigned_data_data_bpHeader_packTotal() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpHeader.packTotal' is an array (false).
     */
    public static boolean isArray_data_data_bpHeader_packTotal() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpHeader.packTotal'
     */
    public static int offset_data_data_bpHeader_packTotal() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpHeader.packTotal'
     */
    public static int offsetBits_data_data_bpHeader_packTotal() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'data.data.bpHeader.packTotal'
     */
    public short get_data_data_bpHeader_packTotal() {
        return (short)getUIntElement(offsetBits_data_data_bpHeader_packTotal(), 8);
    }

    /**
     * Set the value of the field 'data.data.bpHeader.packTotal'
     */
    public void set_data_data_bpHeader_packTotal(short value) {
        setUIntElement(offsetBits_data_data_bpHeader_packTotal(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpHeader.packTotal'
     */
    public static int size_data_data_bpHeader_packTotal() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpHeader.packTotal'
     */
    public static int sizeBits_data_data_bpHeader_packTotal() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpHeader.byteTotal
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpHeader.byteTotal' is signed (false).
     */
    public static boolean isSigned_data_data_bpHeader_byteTotal() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpHeader.byteTotal' is an array (false).
     */
    public static boolean isArray_data_data_bpHeader_byteTotal() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpHeader.byteTotal'
     */
    public static int offset_data_data_bpHeader_byteTotal() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpHeader.byteTotal'
     */
    public static int offsetBits_data_data_bpHeader_byteTotal() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'data.data.bpHeader.byteTotal'
     */
    public int get_data_data_bpHeader_byteTotal() {
        return (int)getUIntElement(offsetBits_data_data_bpHeader_byteTotal(), 16);
    }

    /**
     * Set the value of the field 'data.data.bpHeader.byteTotal'
     */
    public void set_data_data_bpHeader_byteTotal(int value) {
        setUIntElement(offsetBits_data_data_bpHeader_byteTotal(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpHeader.byteTotal'
     */
    public static int size_data_data_bpHeader_byteTotal() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpHeader.byteTotal'
     */
    public static int sizeBits_data_data_bpHeader_byteTotal() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpHeader.numBlocks
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpHeader.numBlocks' is signed (false).
     */
    public static boolean isSigned_data_data_bpHeader_numBlocks() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpHeader.numBlocks' is an array (false).
     */
    public static boolean isArray_data_data_bpHeader_numBlocks() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpHeader.numBlocks'
     */
    public static int offset_data_data_bpHeader_numBlocks() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpHeader.numBlocks'
     */
    public static int offsetBits_data_data_bpHeader_numBlocks() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'data.data.bpHeader.numBlocks'
     */
    public short get_data_data_bpHeader_numBlocks() {
        return (short)getUIntElement(offsetBits_data_data_bpHeader_numBlocks(), 8);
    }

    /**
     * Set the value of the field 'data.data.bpHeader.numBlocks'
     */
    public void set_data_data_bpHeader_numBlocks(short value) {
        setUIntElement(offsetBits_data_data_bpHeader_numBlocks(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpHeader.numBlocks'
     */
    public static int size_data_data_bpHeader_numBlocks() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpHeader.numBlocks'
     */
    public static int sizeBits_data_data_bpHeader_numBlocks() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpHeader.numPtrs
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpHeader.numPtrs' is signed (false).
     */
    public static boolean isSigned_data_data_bpHeader_numPtrs() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpHeader.numPtrs' is an array (false).
     */
    public static boolean isArray_data_data_bpHeader_numPtrs() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpHeader.numPtrs'
     */
    public static int offset_data_data_bpHeader_numPtrs() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpHeader.numPtrs'
     */
    public static int offsetBits_data_data_bpHeader_numPtrs() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'data.data.bpHeader.numPtrs'
     */
    public short get_data_data_bpHeader_numPtrs() {
        return (short)getUIntElement(offsetBits_data_data_bpHeader_numPtrs(), 8);
    }

    /**
     * Set the value of the field 'data.data.bpHeader.numPtrs'
     */
    public void set_data_data_bpHeader_numPtrs(short value) {
        setUIntElement(offsetBits_data_data_bpHeader_numPtrs(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpHeader.numPtrs'
     */
    public static int size_data_data_bpHeader_numPtrs() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpHeader.numPtrs'
     */
    public static int sizeBits_data_data_bpHeader_numPtrs() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpData.curPack
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpData.curPack' is signed (false).
     */
    public static boolean isSigned_data_data_bpData_curPack() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpData.curPack' is an array (false).
     */
    public static boolean isArray_data_data_bpData_curPack() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpData.curPack'
     */
    public static int offset_data_data_bpData_curPack() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpData.curPack'
     */
    public static int offsetBits_data_data_bpData_curPack() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.data.bpData.curPack'
     */
    public short get_data_data_bpData_curPack() {
        return (short)getUIntElement(offsetBits_data_data_bpData_curPack(), 8);
    }

    /**
     * Set the value of the field 'data.data.bpData.curPack'
     */
    public void set_data_data_bpData_curPack(short value) {
        setUIntElement(offsetBits_data_data_bpData_curPack(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.bpData.curPack'
     */
    public static int size_data_data_bpData_curPack() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.bpData.curPack'
     */
    public static int sizeBits_data_data_bpData_curPack() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.bpData.data
    //   Field type: byte[]
    //   Offset (bits): 56
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.bpData.data' is signed (false).
     */
    public static boolean isSigned_data_data_bpData_data() {
        return false;
    }

    /**
     * Return whether the field 'data.data.bpData.data' is an array (true).
     */
    public static boolean isArray_data_data_bpData_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.bpData.data'
     */
    public static int offset_data_data_bpData_data(int index1) {
        int offset = 56;
        if (index1 < 0 || index1 >= 22) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.bpData.data'
     */
    public static int offsetBits_data_data_bpData_data(int index1) {
        int offset = 56;
        if (index1 < 0 || index1 >= 22) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data.data.bpData.data' as a byte[]
     */
    public byte[] get_data_data_bpData_data() {
        byte[] tmp = new byte[22];
        for (int index0 = 0; index0 < numElements_data_data_bpData_data(0); index0++) {
            tmp[index0] = getElement_data_data_bpData_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data.data.bpData.data' from the given byte[]
     */
    public void set_data_data_bpData_data(byte[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data_data_bpData_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a byte) of the array 'data.data.bpData.data'
     */
    public byte getElement_data_data_bpData_data(int index1) {
        return (byte)getSIntElement(offsetBits_data_data_bpData_data(index1), 8);
    }

    /**
     * Set an element of the array 'data.data.bpData.data'
     */
    public void setElement_data_data_bpData_data(int index1, byte value) {
        setSIntElement(offsetBits_data_data_bpData_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data.data.bpData.data'
     */
    public static int totalSize_data_data_bpData_data() {
        return (176 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data.data.bpData.data'
     */
    public static int totalSizeBits_data_data_bpData_data() {
        return 176;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data.data.bpData.data'
     */
    public static int elementSize_data_data_bpData_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data.data.bpData.data'
     */
    public static int elementSizeBits_data_data_bpData_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data.data.bpData.data'
     */
    public static int numDimensions_data_data_bpData_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data.data.bpData.data'
     */
    public static int numElements_data_data_bpData_data() {
        return 22;
    }

    /**
     * Return the number of elements in the array 'data.data.bpData.data'
     * for the given dimension.
     */
    public static int numElements_data_data_bpData_data(int dimension) {
      int array_dims[] = { 22,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data.data.bpData.data' with a String
     */
    public void setString_data_data_bpData_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data_data_bpData_data(i, (byte)s.charAt(i));
         }
         setElement_data_data_bpData_data(i, (byte)0); //null terminate
    }

    /**
     * Read the array 'data.data.bpData.data' as a String
     */
    public String getString_data_data_bpData_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,22)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data_data_bpData_data(i) == (char)0) break;
             carr[i] = (char)getElement_data_data_bpData_data(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wState.state
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wState.state' is signed (false).
     */
    public static boolean isSigned_data_data_wState_state() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wState.state' is an array (false).
     */
    public static boolean isArray_data_data_wState_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wState.state'
     */
    public static int offset_data_data_wState_state() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wState.state'
     */
    public static int offsetBits_data_data_wState_state() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.data.wState.state'
     */
    public short get_data_data_wState_state() {
        return (short)getUIntElement(offsetBits_data_data_wState_state(), 8);
    }

    /**
     * Set the value of the field 'data.data.wState.state'
     */
    public void set_data_data_wState_state(short value) {
        setUIntElement(offsetBits_data_data_wState_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.wState.state'
     */
    public static int size_data_data_wState_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.wState.state'
     */
    public static int sizeBits_data_data_wState_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.wState.dataSetTime
    //   Field type: long
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.wState.dataSetTime' is signed (false).
     */
    public static boolean isSigned_data_data_wState_dataSetTime() {
        return false;
    }

    /**
     * Return whether the field 'data.data.wState.dataSetTime' is an array (false).
     */
    public static boolean isArray_data_data_wState_dataSetTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.wState.dataSetTime'
     */
    public static int offset_data_data_wState_dataSetTime() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.wState.dataSetTime'
     */
    public static int offsetBits_data_data_wState_dataSetTime() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'data.data.wState.dataSetTime'
     */
    public long get_data_data_wState_dataSetTime() {
        return (long)getUIntElement(offsetBits_data_data_wState_dataSetTime(), 32);
    }

    /**
     * Set the value of the field 'data.data.wState.dataSetTime'
     */
    public void set_data_data_wState_dataSetTime(long value) {
        setUIntElement(offsetBits_data_data_wState_dataSetTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.data.wState.dataSetTime'
     */
    public static int size_data_data_wState_dataSetTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.data.wState.dataSetTime'
     */
    public static int sizeBits_data_data_wState_dataSetTime() {
        return 32;
    }

}
