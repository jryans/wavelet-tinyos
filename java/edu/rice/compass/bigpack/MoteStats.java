/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MoteStats'
 * message type.
 */

package edu.rice.compass.bigpack;

import java.util.List;

public class MoteStats extends BigPack {

	/** The default size of this message type in bytes. */
	public static final int DEFAULT_MESSAGE_SIZE = 13;

	/**
	 * Create a new MoteStats using the given byte array as backing store.
	 */
	public MoteStats(byte[] data, int numBlks, int numPtrs) {
		super(data, DEFAULT_MESSAGE_SIZE, numBlks, numPtrs);
	}

	protected void initChildren() {
		wavelet_level = new StatsWTL[get_wavelet_numLevels()];
	}
	
	protected void storeChildren(byte[] rawData, int offset, int[] childBlockNum, List[] childPtr) {
		if (offset == offset_wavelet_level()) {
			for (int c = 0; c < get_wavelet_numLevels(); c++)
				wavelet_level[c] = new StatsWTL(rawData, childBlockNum[c], blocks, childPtr[c]);
		}
	}

	protected int numChildren(int offset) {
		if (offset == offset_wavelet_level()) {
			return get_wavelet_numLevels();
		}
		return 0;
	}

	protected int numChildTypes() {
		return 1;
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rcvd
	// Field type: int
	// Offset (bits): 0
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rcvd' is signed (false).
	 */
	public static boolean isSigned_rcvd() {
		return false;
	}

	/**
	 * Return whether the field 'rcvd' is an array (false).
	 */
	public static boolean isArray_rcvd() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rcvd'
	 */
	public static int offset_rcvd() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rcvd'
	 */
	public static int offsetBits_rcvd() {
		return 0;
	}

	/**
	 * Return the value (as a int) of the field 'rcvd'
	 */
	public int get_rcvd() {
		return (int) getUIntElement(offsetBits_rcvd(), 16);
	}

	/**
	 * Set the value of the field 'rcvd'
	 */
	public void set_rcvd(int value) {
		setUIntElement(offsetBits_rcvd(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rcvd'
	 */
	public static int size_rcvd() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rcvd'
	 */
	public static int sizeBits_rcvd() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rssi
	// Field type: float
	// Offset (bits): 16
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rssi' is signed (false).
	 */
	public static boolean isSigned_rssi() {
		return false;
	}

	/**
	 * Return whether the field 'rssi' is an array (false).
	 */
	public static boolean isArray_rssi() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rssi'
	 */
	public static int offset_rssi() {
		return (16 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rssi'
	 */
	public static int offsetBits_rssi() {
		return 16;
	}

	/**
	 * Return the value (as a float) of the field 'rssi'
	 */
	public float get_rssi() {
		return (float) getFloatElement(offsetBits_rssi(), 32);
	}

	/**
	 * Set the value of the field 'rssi'
	 */
	public void set_rssi(float value) {
		setFloatElement(offsetBits_rssi(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rssi'
	 */
	public static int size_rssi() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rssi'
	 */
	public static int sizeBits_rssi() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: sent
	// Field type: int
	// Offset (bits): 48
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'sent' is signed (false).
	 */
	public static boolean isSigned_sent() {
		return false;
	}

	/**
	 * Return whether the field 'sent' is an array (false).
	 */
	public static boolean isArray_sent() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'sent'
	 */
	public static int offset_sent() {
		return (48 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'sent'
	 */
	public static int offsetBits_sent() {
		return 48;
	}

	/**
	 * Return the value (as a int) of the field 'sent'
	 */
	public int get_sent() {
		return (int) getUIntElement(offsetBits_sent(), 16);
	}

	/**
	 * Set the value of the field 'sent'
	 */
	public void set_sent(int value) {
		setUIntElement(offsetBits_sent(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'sent'
	 */
	public static int size_sent() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'sent'
	 */
	public static int sizeBits_sent() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: acked
	// Field type: int
	// Offset (bits): 64
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'acked' is signed (false).
	 */
	public static boolean isSigned_acked() {
		return false;
	}

	/**
	 * Return whether the field 'acked' is an array (false).
	 */
	public static boolean isArray_acked() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'acked'
	 */
	public static int offset_acked() {
		return (64 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'acked'
	 */
	public static int offsetBits_acked() {
		return 64;
	}

	/**
	 * Return the value (as a int) of the field 'acked'
	 */
	public int get_acked() {
		return (int) getUIntElement(offsetBits_acked(), 16);
	}

	/**
	 * Set the value of the field 'acked'
	 */
	public void set_acked(int value) {
		setUIntElement(offsetBits_acked(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'acked'
	 */
	public static int size_acked() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'acked'
	 */
	public static int sizeBits_acked() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: wavelet.numLevels
	// Field type: short
	// Offset (bits): 80
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'wavelet.numLevels' is signed (false).
	 */
	public static boolean isSigned_wavelet_numLevels() {
		return false;
	}

	/**
	 * Return whether the field 'wavelet.numLevels' is an array (false).
	 */
	public static boolean isArray_wavelet_numLevels() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'wavelet.numLevels'
	 */
	public static int offset_wavelet_numLevels() {
		return (80 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'wavelet.numLevels'
	 */
	public static int offsetBits_wavelet_numLevels() {
		return 80;
	}

	/**
	 * Return the value (as a short) of the field 'wavelet.numLevels'
	 */
	public short get_wavelet_numLevels() {
		return (short) getUIntElement(offsetBits_wavelet_numLevels(), 8);
	}

	/**
	 * Set the value of the field 'wavelet.numLevels'
	 */
	public void set_wavelet_numLevels(short value) {
		setUIntElement(offsetBits_wavelet_numLevels(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'wavelet.numLevels'
	 */
	public static int size_wavelet_numLevels() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'wavelet.numLevels'
	 */
	public static int sizeBits_wavelet_numLevels() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: wavelet.level
	// Field type: array
	// Offset (bits): 88
	// Size (bits): 16
	// ///////////////////////////////////////////////////////
	
	private StatsWTL[] wavelet_level;

	/**
	 * Return the offset (in bytes) of the pointer to array 'wavelet.level'
	 */
	public static int offset_wavelet_level() {
		return (88 / 8);
	}

	/**
	 * Return the array 'wavelet.level'
	 */
	public StatsWTL[] get_wavelet_level() {
		return wavelet_level;
	}

	/**
	 * Set the array 'wavelet.level'
	 */
	public void set_wavelet_level(StatsWTL[] value) {
		wavelet_level = value;
	}

}
